# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type IpInfo {
  ip: String!
  type: String!
  hostname: String
  carrier: Carrier!
  company: Company!
  connection: Connection!
  currency: Currency!
  location: Location!
  security: Security!
  time_zone: TimeZone!
}

type Carrier {
  name: String
  mcc: String
  mnc: String
}

type Company {
  domain: String!
  name: String!
  type: String!
}

type Connection {
  asn: Float!
  domain: String!
  organization: String!
  route: String!
  type: String!
}

type Currency {
  code: String!
  name: String!
  name_native: String!
  plural: String!
  plural_native: String!
  symbol: String!
  symbol_native: String!
  format: Format!
}

type Format {
  negative: NegativeOrPositive!
  positive: NegativeOrPositive!
}

type NegativeOrPositive {
  prefix: String!
  suffix: String!
}

type Location {
  continent: ContinentOrRegion!
  country: Country!
  region: ContinentOrRegion!
  city: String!
  postal: String!
  latitude: Float!
  longitude: Float!
  language: LanguagesEntityOrLanguage!
  in_eu: Boolean!
}

type ContinentOrRegion {
  code: String!
  name: String!
}

type Country {
  area: Float!
  borders: [String!]!
  calling_code: String!
  capital: String!
  code: String!
  name: String!
  population: Float!
  population_density: Float!
  flag: Flag!
  languages: [LanguagesEntityOrLanguage!]
  tld: String!
}

type Flag {
  emoji: String!
  emoji_unicode: String!
  emojitwo: String!
  noto: String!
  twemoji: String!
  wikimedia: String!
}

type LanguagesEntityOrLanguage {
  code: String!
  name: String!
  native: String!
}

type Security {
  is_abuser: Boolean!
  is_attacker: Boolean!
  is_bogon: Boolean!
  is_cloud_provider: Boolean!
  is_proxy: Boolean!
  is_relay: Boolean!
  is_tor: Boolean!
  is_tor_exit: Boolean!
  is_vpn: Boolean!
  is_anonymous: Boolean!
  is_threat: Boolean!
}

type TimeZone {
  id: String!
  abbreviation: String!
  current_time: String!
  name: String!
  offset: Float!
  in_daylight_saving: Boolean!
}

type Address {
  ip: String!
  info: IpInfo
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
This describes a hop that was retrieved by running traceroute to the destionation. It is an existing hop that would ahve been taken were the packet routed over the internet.
"""
type TracerouteHop {
  id: Float!
  address: Address
  terminal: Terminal!
  run: Run!
  hop: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
This describes an hop in the context of the installation. It is either a previous hop that has been taken by the user, or it is an option for the user in the future.
"""
type RunHop {
  id: Float!
  address: Address!
  terminal: Terminal!
  run: Run!
  type: RunHopType!
  status: RunHopStatus!
  hop: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Describes the label that is attached to the hop"""
enum RunHopType {
  """The hop takes the user backwards to a previously visited hop"""
  PREVIOUS

  """The hop is taken as an alternative to an advised hop"""
  ALTERNATIVE

  """The hop takes the user in the recommended direction"""
  RECOMMENDED
}

"""
Describes the current status of this hop: has it already been taken or merely been suggested...
"""
enum RunHopStatus {
  """The hop was actually taken by a user action"""
  ACTUAL

  """The hop is potential option for the user to take"""
  POTENTIAL
}

type Run {
  id: String!
  nfcId: String
  url: String!
  destination: Address!
  terminal: Terminal

  """
  The internet hops a packet would actually take when transmitted in real life. NOTE: Look at the `hops` field if you want the hops that pertain specifically to the installation
  """
  tracerouteHops: [TracerouteHop!]! @deprecated(reason: "You shouldn't need this field on the front-end. Please use `hops` instead.")

  """
  The hops that have been identified for this route in the context of the installation.
  """
  hops: [RunHop!]!

  """The index of the RunHop where the run is currently at"""
  currentHopIndex: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  imagePath: String
}

type Presence {
  id: Float!
  terminal: Terminal!
  ip: String!
  websocketId: String!
  connectedAt: DateTime!
  lastSeenAt: DateTime!
}

type Terminal {
  id: Float!
  type: TerminalType!
  status: TerminalStatus!
  payload: String
  connectionsTo: [Terminal!]!
  connectionsFrom: [Terminal!]!
  run: Run
  presences: [Presence!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TerminalType {
  """Creates a request and dispatches it to an `gateway`"""
  SENDER

  """Receives a response and displays it on a connected screen"""
  RECEIVER

  """Receives a request, transforms it into a response"""
  SERVER

  """
  A special type of router that bridges a `sender` and an internet of `router`s
  """
  GATEWAY

  """A distributor of packets across the internet"""
  ROUTER
}

enum TerminalStatus {
  """
  The terminal is active and operational, but not currently in use by a user
  """
  IDLE

  """A packet is currently being scanned using the NFC reader"""
  SCANNING_NFC

  """A packet is actively being created or transformed on the terminal"""
  CREATING_PACKET

  """A packet has been transformed, but is still actively being scanned"""
  CREATED_PACKET

  """The terminal has failed its heartbeats and is considered offline"""
  OFFLINE
}

type Job {
  name: String!
  id: String
  attemptsMade: Float!
  processedOn: Float
  finishedOn: Float
  failedReason: String
  stacktrace: [String!]
  timestamp: Float!
  data: String!
}

type Query {
  terminal(id: Float!): Terminal
  terminals: [Terminal!]!
  run(id: String!): Run!
}

type Mutation {
  """
  Indicate that a particular terminal has scanned an NFC tag. This should result in the terminal status being set to `SCANNING_NFC`
  """
  scanNfcForTerminal(terminalId: Float!, nfcId: String!): Boolean

  """
  Used for `SENDER` and `SERVER` terminal types. These terminals may transform a packet using a particular interaction. Depending on `isPacketCreated`, this should result in the terminal status being set to `CREATING_PACKET` or `CREATED_PACKET`
  """
  createReturnPacketForTerminal(
    terminalId: Float!

    """
    The before/after packet creation states are tracked seperately. If `isPacketCreated` is set to `false`, the state will be set to `CREATING_PACKET`, whereas if `isPacketCreated` is `true`, the terminal state will be set to `CREATED_PACKET`
    """
    isPacketCreated: Boolean!
  ): Boolean

  """Restore a particular terminal to the `IDLE` status"""
  setTerminalToIdle(terminalId: Float!): Boolean
  createRun(url: String!, nfcId: String!): Run!
}

type Subscription {
  registerTerminal(id: Float!): Terminal
  allTerminals: [Terminal!]!
  jobs: [Job!]!
}